package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"airdock/graph/model"
	"airdock/store"
	"context"
)

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.NewItem) (*model.Item, error) {
	item, err := r.itemsStore.CreateItem(ctx, input.Name)
	return &model.Item{
		ID:   item.Id,
		Name: item.Name,
	}, err
}

// RemoveItem is the resolver for the removeItem field.
func (r *mutationResolver) RemoveItem(ctx context.Context, id string) (string, error) {
	err := r.itemsStore.RemoveItem(ctx, id)
	return id, err
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	items, err := r.itemsStore.AllItems(ctx)
	var out []*model.Item
	if err != nil {
		return out, err
	}

	out = make([]*model.Item, 0, len(items))
	for _, item := range items {
		out = append(out, &model.Item{
			ID:   item.Id,
			Name: item.Name,
		})
	}
	return out, nil
}

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context) (string, error) {
	return "Welcome to La Soleil!", nil
}

// ItemsCreate is the resolver for the itemsCreate field.
func (r *subscriptionResolver) ItemsCreate(ctx context.Context) (<-chan *model.Item, error) {
	resch := make(chan *model.Item)
	itemch := make(chan store.Item)

	r.itemsStore.Register(itemch)

	go func() {
		defer close(itemch)
		defer close(resch)
		defer r.itemsStore.Unregister(itemch)

		for {
			var mItem model.Item
			select {
			case <-ctx.Done():
				return
			case item := <-itemch:
				mItem = model.Item{
					ID:   item.Id,
					Name: item.Name,
				}
			}

			select {
			case <-ctx.Done():
				return
			case resch <- &mItem:
			}
		}
	}()

	return resch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
